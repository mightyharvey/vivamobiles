@mixin breakpoint($breakpoint, $print: false) {
  @if $breakpoint == s-up {
    @media #{$small-up}{ @content; }
  }
  @if $breakpoint == s-only {
    @media #{$small-only}{ @content; }
  }
  @if $breakpoint == m-up {
    @media #{$medium-up}{ @content; }
  }
  @if $breakpoint == m-only {
    @media #{$medium-only}{ @content; }
  }
  @if $breakpoint == m-down {
    @media #{$medium-down}{ @content; }
  }
  @if $breakpoint == l-up {
    @media #{$large-up}{ @content; }
  }
  @if $breakpoint == l-only {
    @media #{$large-only}{ @content; }
  }
  @if $breakpoint == l-down {
    @media #{$large-down}{ @content; }
  }
  @if $breakpoint == xl-up {
    @media #{$xlarge-up}{ @content; }
  }
  @if $breakpoint == xl-only {
    @media #{$xlarge-only}{ @content; }
  }

  @if $print or $breakpoint == print {
    @media print { @content; }
  }
}

// Fluid column / element widths

@mixin row($context, $local-gutter: $gutter) {
  margin-left: $local-gutter / ($context + $local-gutter) / 2 * -100%;
  margin-right: $local-gutter / ($context + $local-gutter) / 2 * -100%;
}

@mixin fluid-width($width, $context, $local-gutter: $gutter) {
  width: $width / ($context + $local-gutter) * 100%;
  margin-left: $local-gutter / ($context + $local-gutter) / 2 * 100%;
  margin-right: $local-gutter / ($context + $local-gutter) / 2 * 100%;
}

// Column Helper
// Use around a group of child DIVs that use @grin-columns:
// - To make sure the that the floats clear
// - Use 'collapse' to offset the internal padding
//
@mixin grid-row($behavior: nest, $internal-gutter: $column-gutter) {
  // scss-lint:disable all
  $direction: get-direction($layout-direction, $default-layout-direction);
  $opposite-direction: get-opposite-direction($direction);
  @include clearfix;

  @if $behavior == nest {
    margin-#{$direction}: -($internal-gutter);
    margin-#{$opposite-direction}: -($internal-gutter);
  } @else if $behavior == collapse {
    width: 100%;
    margin-right: auto;
    margin-left: auto;
  }

  min-width: 100%;
}

// Column Helper
// Similar to Bourbon Neat's grid structure, allows for multiple rows
@mixin grid-columns($span: $columns of $container-columns, $display: block) {
  // scss-lint:disable all
  $columns: nth($span, 1);
  $container-columns: container-span($span);
  $parent-columns: get-parent-columns($container-columns) !global;
  $single-span: (1/$parent-columns);
  $direction: get-direction($layout-direction, $default-layout-direction);
  $opposite-direction: get-opposite-direction($direction);
  $display-table: is-display-table($container-display-table, $display);
  $width: percentage($columns * $single-span);

  @if $display-table {
    display: table-cell;
    width: $width;
  } @else {
    float: #{$opposite-direction};
    box-sizing: border-box;

    @if $display != no-display {
      display: block;
    }

    @if $display == collapse or $display == block-collapse or $display == row {
      width: $width;
    } @else {
      width: $width;
      padding-right: $column-gutter;
      padding-left: $column-gutter;
      &:nth-of-type(#{(($container-columns/$columns))}n + 1) {
        clear: $opposite-direction;
      }
    }

    @if $display == row {
      padding-right: $column-gutter;

      &:last-child {
        padding-right: 0;
      }
    }
  }
}

// Border Radius
@mixin border-radius($radius) {
  border-radius: $radius;
  background-clip: padding-box;
}

// Maintain Aspect Ratio
// @include maintain-ratio(16 9);
@mixin maintain-ratio($ratio: 1 1) {
  @if length($ratio) < 2 or length($ratio) > 2 {
    @warn "$ratio must be a list with two values.";
  }

  $width: 100%;
  $height: percentage(nth($ratio, 2) / nth($ratio, 1));
  width: $width;
  height: 0;
  padding-bottom: $height;
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

// Centerer
@mixin centerer {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// Coverer
@mixin coverer {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

@mixin page-overlay($zindex) {
  position: fixed;
  top: 0;
  right: 0;
  z-index: $zindex;
  display: none;
  width: 100%;
  height: 100vh;
  background-color: $modal-background-color;
  opacity: 0;
  visibility: hidden;
  transition: all 0.5s $ease-out-quad;

  &.visible {
    display: block;
    opacity: 1;
    visibility: visible;
  }
}
